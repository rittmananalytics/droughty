cube (`budgets_sales`, {
sql: `select * from analytics_qa.budgets_sales`,
dimensions: {
budget_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `budget_pk`,
  description: `not available`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
budget_group:  {
  sql: `budget_group`,
  type: `string`,
} ,
budget_name:  {
  sql: `budget_name`,
  type: `string`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
institution_name:  {
  sql: `institution_name`,
  type: `string`,
} ,
entry_type_code:  {
  sql: `entry_type_code`,
  type: `string`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
}});
cube (`core_agents`, {
sql: `select * from analytics_qa.core_agents`,
dimensions: {
agent_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `agent_pk`,
  description: `The key and link to an agent`,
} ,
country_fk:  {
  sql: `country_fk`,
  type: `string`,
} ,
agent_salesforce_business_key:  {
  sql: `agent_salesforce_business_key`,
  type: `string`,
} ,
name:  {
  sql: `name`,
  type: `string`,
} ,
group:  {
  sql: `group`,
  type: `string`,
} ,
status:  {
  sql: `status`,
  type: `string`,
} ,
sales_channel:  {
  sql: `sales_channel`,
  type: `string`,
} ,
uk_based_agent:  {
  sql: `uk_based_agent`,
  type: `boolean`,
} ,
}});
cube (`core_countries`, {
sql: `select * from analytics_qa.core_countries`,
dimensions: {
country_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `country_pk`,
  description: `The key and link to a country`,
} ,
country:  {
  sql: `country`,
  type: `string`,
} ,
country_iso_key:  {
  sql: `country_iso_key`,
  type: `string`,
} ,
salesforce_country_key:  {
  sql: `salesforce_country_key`,
  type: `string`,
} ,
country_nationality:  {
  sql: `country_nationality`,
  type: `string`,
} ,
country_is_sanctioned:  {
  sql: `country_is_sanctioned`,
  type: `boolean`,
} ,
}});
cube (`core_country_mapping`, {
sql: `select * from analytics_qa.core_country_mapping`,
dimensions: {
country_mapping_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `country_mapping_pk`,
  description: `The key to link countries to other records`,
} ,
country_fk:  {
  sql: `country_fk`,
  type: `string`,
} ,
nationality_fk:  {
  sql: `nationality_fk`,
  type: `string`,
} ,
sales_region:  {
  sql: `sales_region`,
  type: `string`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
schols_region:  {
  sql: `schols_region`,
  type: `string`,
} ,
valid_from:  {
  sql: `valid_from`,
  type: `time`,
} ,
valid_to:  {
  sql: `valid_to`,
  type: `time`,
} ,
}});
cube (`core_institutions`, {
sql: `select * from analytics_qa.core_institutions`,
dimensions: {
institution_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `institution_pk`,
  description: `The key and link to an institution`,
} ,
country_fk:  {
  sql: `country_fk`,
  type: `string`,
} ,
institution_type:  {
  sql: `institution_type`,
  type: `string`,
} ,
institution_code:  {
  sql: `institution_code`,
  type: `string`,
} ,
institution_name:  {
  sql: `institution_name`,
  type: `string`,
} ,
institution_group:  {
  sql: `institution_group`,
  type: `string`,
} ,
}});
cube (`core_program_intakes`, {
sql: `select * from analytics_qa.core_program_intakes`,
dimensions: {
program_intake_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `program_intake_pk`,
  description: `The key to link a record to a program intake`,
} ,
program_fk:  {
  sql: `program_fk`,
  type: `string`,
} ,
intake:  {
  sql: `intake`,
  type: `time`,
} ,
intake_season:  {
  sql: `intake_season`,
  type: `string`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
intake_academic_year:  {
  sql: `intake_academic_year`,
  type: `string`,
} ,
status:  {
  sql: `status`,
  type: `string`,
} ,
enrolment_start:  {
  sql: `enrolment_start`,
  type: `time`,
} ,
enrolment_end:  {
  sql: `enrolment_end`,
  type: `time`,
} ,
teaching_start:  {
  sql: `teaching_start`,
  type: `time`,
} ,
teaching_end:  {
  sql: `teaching_end`,
  type: `time`,
} ,
}});
cube (`core_programs`, {
sql: `select * from analytics_qa.core_programs`,
dimensions: {
program_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `program_pk`,
  description: `The key to link to a certain program`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
program_code:  {
  sql: `program_code`,
  type: `string`,
} ,
name:  {
  sql: `name`,
  type: `string`,
} ,
level:  {
  sql: `level`,
  type: `string`,
} ,
status:  {
  sql: `status`,
  type: `string`,
} ,
type:  {
  sql: `type`,
  type: `string`,
} ,
university_unit_faculty:  {
  sql: `university_unit_faculty`,
  type: `string`,
} ,
university_unit_school:  {
  sql: `university_unit_school`,
  type: `string`,
} ,
university_unit_department:  {
  sql: `university_unit_department`,
  type: `string`,
} ,
university_unit_college:  {
  sql: `university_unit_college`,
  type: `string`,
} ,
university_unit_institute:  {
  sql: `university_unit_institute`,
  type: `string`,
} ,
university_unit_division:  {
  sql: `university_unit_division`,
  type: `string`,
} ,
entry_level:  {
  sql: `entry_level`,
  type: `string`,
} ,
award_type:  {
  sql: `award_type`,
  type: `string`,
} ,
award_title:  {
  sql: `award_title`,
  type: `string`,
} ,
award_code:  {
  sql: `award_code`,
  type: `string`,
} ,
duration_length:  {
  sql: `duration_length`,
  type: `string`,
} ,
entry_type_code:  {
  sql: `entry_type_code`,
  type: `string`,
} ,
}});
cube (`core_scholarship_reason_owners`, {
sql: `select * from analytics_qa.core_scholarship_reason_owners`,
dimensions: {
scholarship_reason_owner_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `scholarship_reason_owner_pk`,
  description: `The key to link the core_scholarship_reasons_owner record to another record`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
budget_pot:  {
  sql: `budget_pot`,
  type: `string`,
} ,
budget_owner:  {
  sql: `budget_owner`,
  type: `string`,
} ,
}});
cube (`core_scholarship_reasons`, {
sql: `select * from analytics_qa.core_scholarship_reasons`,
dimensions: {
scholarship_reason_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `scholarship_reason_pk`,
  description: `The key to link the scholarship reason to another record`,
} ,
scholarship_reason:  {
  sql: `scholarship_reason`,
  type: `string`,
} ,
budget_pot:  {
  sql: `budget_pot`,
  type: `string`,
} ,
}});
cube (`core_sponsors`, {
sql: `select * from analytics_qa.core_sponsors`,
dimensions: {
sponsor_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `sponsor_pk`,
  description: `The key to link a sponsor to a certain record`,
} ,
country_fk:  {
  sql: `country_fk`,
  type: `string`,
} ,
sponsor_salesforce_business_key:  {
  sql: `sponsor_salesforce_business_key`,
  type: `string`,
} ,
name:  {
  sql: `name`,
  type: `string`,
} ,
group:  {
  sql: `group`,
  type: `string`,
} ,
status:  {
  sql: `status`,
  type: `string`,
} ,
uk_sponsor:  {
  sql: `uk_sponsor`,
  type: `boolean`,
} ,
}});
cube (`core_subjects`, {
sql: `select * from analytics_qa.core_subjects`,
dimensions: {
program_subject_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `program_subject_pk`,
  description: `The key to link the program's subject to a record`,
} ,
program_fk:  {
  sql: `program_fk`,
  type: `string`,
} ,
subject:  {
  sql: `subject`,
  type: `string`,
} ,
subject_group:  {
  sql: `subject_group`,
  type: `string`,
} ,
}});
cube (`core_user_mapping`, {
sql: `select * from analytics_qa.core_user_mapping`,
dimensions: {
user_mapping_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `user_mapping_pk`,
  description: `not available`,
} ,
user_fk:  {
  sql: `user_fk`,
  type: `string`,
} ,
user_natural_key:  {
  sql: `user_natural_key`,
  type: `string`,
} ,
sales_region:  {
  sql: `sales_region`,
  type: `string`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
valid_from:  {
  sql: `valid_from`,
  type: `time`,
} ,
valid_to:  {
  sql: `valid_to`,
  type: `time`,
} ,
}});
cube (`core_users`, {
sql: `select * from analytics_qa.core_users`,
dimensions: {
user_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `user_pk`,
  description: `The key to link an user to a record`,
} ,
user_natural_key:  {
  sql: `user_natural_key`,
  type: `string`,
} ,
name:  {
  sql: `name`,
  type: `string`,
} ,
sales_region:  {
  sql: `sales_region`,
  type: `string`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
}});
cube (`product_progression_plans`, {
sql: `select * from analytics_qa.product_progression_plans`,
dimensions: {
progression_plan_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `progression_plan_pk`,
  description: `The key to link a record to a progression plan`,
} ,
progression_plan_fk:  {
  sql: `progression_plan_fk`,
  type: `string`,
} ,
application_fk:  {
  sql: `application_fk`,
  type: `string`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
progression_plan_program_intake_fk:  {
  sql: `progression_plan_program_intake_fk`,
  type: `string`,
} ,
progression_plan_program_fk:  {
  sql: `progression_plan_program_fk`,
  type: `string`,
} ,
entry_type_code:  {
  sql: `entry_type_code`,
  type: `string`,
} ,
degree_code:  {
  sql: `degree_code`,
  type: `string`,
} ,
degree_name:  {
  sql: `degree_name`,
  type: `string`,
} ,
degree_entry_level:  {
  sql: `degree_entry_level`,
  type: `string`,
} ,
is_primary_progression:  {
  sql: `is_primary_progression`,
  type: `string`,
} ,
university_intake_date:  {
  sql: `university_intake_date`,
  type: `time`,
} ,
university_intake_season:  {
  sql: `university_intake_season`,
  type: `string`,
} ,
university_enrolment:  {
  sql: `university_enrolment`,
  type: `time`,
} ,
degree_teaching_end:  {
  sql: `degree_teaching_end`,
  type: `time`,
} ,
degree_start:  {
  sql: `degree_start`,
  type: `time`,
} ,
degree_end:  {
  sql: `degree_end`,
  type: `time`,
} ,
degree_teaching_start:  {
  sql: `degree_teaching_start`,
  type: `time`,
} ,
created_at:  {
  sql: `created_at`,
  type: `time`,
} ,
modified_at:  {
  sql: `modified_at`,
  type: `time`,
} ,
}});
cube (`product_progression_plans_history`, {
sql: `select * from analytics_qa.product_progression_plans_history`,
dimensions: {
study_plan_history_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `study_plan_history_pk`,
  description: `The key to link a record to the study plan history record`,
} ,
progression_plan_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `progression_plan_pk`,
  description: `The key to link a record to a progression plan`,
} ,
progression_plan_fk:  {
  sql: `progression_plan_fk`,
  type: `string`,
} ,
application_fk:  {
  sql: `application_fk`,
  type: `string`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
progression_plan_program_intake_fk:  {
  sql: `progression_plan_program_intake_fk`,
  type: `string`,
} ,
progression_plan_program_fk:  {
  sql: `progression_plan_program_fk`,
  type: `string`,
} ,
progression_plan_track_entry_type_code:  {
  sql: `progression_plan_track_entry_type_code`,
  type: `string`,
} ,
progression_plan_program_code:  {
  sql: `progression_plan_program_code`,
  type: `string`,
} ,
progression_plan_program_name:  {
  sql: `progression_plan_program_name`,
  type: `string`,
} ,
progression_plan_entry_level:  {
  sql: `progression_plan_entry_level`,
  type: `string`,
} ,
is_primary_progression:  {
  sql: `is_primary_progression`,
  type: `string`,
} ,
progression_plan_intake_date:  {
  sql: `progression_plan_intake_date`,
  type: `time`,
} ,
progression_plan_intake_season:  {
  sql: `progression_plan_intake_season`,
  type: `string`,
} ,
enrolment_date:  {
  sql: `enrolment_date`,
  type: `time`,
} ,
progression_plan_teaching_end_date:  {
  sql: `progression_plan_teaching_end_date`,
  type: `time`,
} ,
progression_plan_program_start_date:  {
  sql: `progression_plan_program_start_date`,
  type: `time`,
} ,
progression_plan_program_end_date:  {
  sql: `progression_plan_program_end_date`,
  type: `time`,
} ,
progression_plan_teaching_start_date:  {
  sql: `progression_plan_teaching_start_date`,
  type: `time`,
} ,
progression_plan_created_at:  {
  sql: `progression_plan_created_at`,
  type: `time`,
} ,
progression_plan_modified_at:  {
  sql: `progression_plan_modified_at`,
  type: `time`,
} ,
progression_plan_valid_from:  {
  sql: `progression_plan_valid_from`,
  type: `time`,
} ,
progression_plan_valid_to:  {
  sql: `progression_plan_valid_to`,
  type: `time`,
} ,
is_current_progression_plan_record:  {
  sql: `is_current_progression_plan_record`,
  type: `boolean`,
} ,
}});
cube (`product_study_plans`, {
sql: `select * from analytics_qa.product_study_plans`,
dimensions: {
study_plan_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `study_plan_pk`,
  description: `The key to link a record to a study plan`,
} ,
study_plan_fk:  {
  sql: `study_plan_fk`,
  type: `string`,
} ,
application_fk:  {
  sql: `application_fk`,
  type: `string`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
study_plan_program_intake_fk:  {
  sql: `study_plan_program_intake_fk`,
  type: `string`,
} ,
study_plan_program_fk:  {
  sql: `study_plan_program_fk`,
  type: `string`,
} ,
entry_type_code:  {
  sql: `entry_type_code`,
  type: `string`,
} ,
course_code:  {
  sql: `course_code`,
  type: `string`,
} ,
course_name:  {
  sql: `course_name`,
  type: `string`,
} ,
intake_date:  {
  sql: `intake_date`,
  type: `time`,
} ,
intake_season:  {
  sql: `intake_season`,
  type: `string`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
intake_academic_year:  {
  sql: `intake_academic_year`,
  type: `string`,
} ,
entry_level:  {
  sql: `entry_level`,
  type: `string`,
} ,
enrolment:  {
  sql: `enrolment`,
  type: `time`,
} ,
course_start:  {
  sql: `course_start`,
  type: `time`,
} ,
course_end:  {
  sql: `course_end`,
  type: `time`,
} ,
teaching_end:  {
  sql: `teaching_end`,
  type: `time`,
} ,
teaching_start:  {
  sql: `teaching_start`,
  type: `time`,
} ,
created_at:  {
  sql: `created_at`,
  type: `time`,
} ,
modified_at:  {
  sql: `modified_at`,
  type: `time`,
} ,
is_current_version:  {
  sql: `is_current_version`,
  type: `boolean`,
} ,
has_deferred:  {
  sql: `has_deferred`,
  type: `boolean`,
} ,
is_deferred:  {
  sql: `is_deferred`,
  type: `boolean`,
} ,
}});
cube (`product_study_plans_history`, {
sql: `select * from analytics_qa.product_study_plans_history`,
dimensions: {
study_plan_history_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `study_plan_history_pk`,
  description: `The key to link a record to the study plan history record`,
} ,
pathway_sk:  {
  sql: `pathway_sk`,
  type: `string`,
} ,
study_plan_fk:  {
  sql: `study_plan_fk`,
  type: `string`,
} ,
application_fk:  {
  sql: `application_fk`,
  type: `string`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
study_plan_program_intake_fk:  {
  sql: `study_plan_program_intake_fk`,
  type: `string`,
} ,
study_plan_program_fk:  {
  sql: `study_plan_program_fk`,
  type: `string`,
} ,
study_plan_track_entry_type_code:  {
  sql: `study_plan_track_entry_type_code`,
  type: `string`,
} ,
study_plan_program_code:  {
  sql: `study_plan_program_code`,
  type: `string`,
} ,
study_plan_program_name:  {
  sql: `study_plan_program_name`,
  type: `string`,
} ,
study_plan_intake_date:  {
  sql: `study_plan_intake_date`,
  type: `time`,
} ,
study_plan_intake_season:  {
  sql: `study_plan_intake_season`,
  type: `string`,
} ,
study_plan_program_entry_level:  {
  sql: `study_plan_program_entry_level`,
  type: `string`,
} ,
enrolment_date:  {
  sql: `enrolment_date`,
  type: `time`,
} ,
study_plan_program_start_date:  {
  sql: `study_plan_program_start_date`,
  type: `time`,
} ,
study_plan_program_end_date:  {
  sql: `study_plan_program_end_date`,
  type: `time`,
} ,
study_plan_teaching_end_date:  {
  sql: `study_plan_teaching_end_date`,
  type: `time`,
} ,
study_plan_teaching_start_date:  {
  sql: `study_plan_teaching_start_date`,
  type: `time`,
} ,
study_plan_created_at:  {
  sql: `study_plan_created_at`,
  type: `time`,
} ,
study_plan_modified_at:  {
  sql: `study_plan_modified_at`,
  type: `time`,
} ,
study_plan_valid_from:  {
  sql: `study_plan_valid_from`,
  type: `time`,
} ,
study_plan_valid_to:  {
  sql: `study_plan_valid_to`,
  type: `time`,
} ,
is_current_study_plan_record:  {
  sql: `is_current_study_plan_record`,
  type: `boolean`,
} ,
has_deferred:  {
  sql: `has_deferred`,
  type: `string`,
} ,
}});
cube (`sales_application_agent_bridge`, {
sql: `select * from analytics_qa.sales_application_agent_bridge`,
dimensions: {
application_agent_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `application_agent_pk`,
  description: `Unique id to link an agent with an application`,
} ,
application_fk:  {
  sql: `application_fk`,
  type: `string`,
} ,
agent_fk:  {
  sql: `agent_fk`,
  type: `string`,
} ,
is_main_agent:  {
  sql: `is_main_agent`,
  type: `boolean`,
} ,
}});
cube (`sales_application_history`, {
sql: `select * from analytics_qa.sales_application_history`,
dimensions: {
application_history_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `application_history_pk`,
  description: `not available`,
} ,
application_fk:  {
  sql: `application_fk`,
  type: `string`,
} ,
program_fk:  {
  sql: `program_fk`,
  type: `string`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
program_intake_fk:  {
  sql: `program_intake_fk`,
  type: `string`,
} ,
student_fk:  {
  sql: `student_fk`,
  type: `string`,
} ,
sales_manager_fk:  {
  sql: `sales_manager_fk`,
  type: `string`,
} ,
application_owner_fk:  {
  sql: `application_owner_fk`,
  type: `string`,
} ,
cas_team_owner_fk:  {
  sql: `cas_team_owner_fk`,
  type: `string`,
} ,
sponsor_fk:  {
  sql: `sponsor_fk`,
  type: `string`,
} ,
valid_from:  {
  sql: `valid_from`,
  type: `time`,
} ,
valid_to:  {
  sql: `valid_to`,
  type: `time`,
} ,
status:  {
  sql: `status`,
  type: `string`,
} ,
status_group:  {
  sql: `status_group`,
  type: `string`,
} ,
program_code:  {
  sql: `program_code`,
  type: `string`,
} ,
program_name:  {
  sql: `program_name`,
  type: `string`,
} ,
intake:  {
  sql: `intake`,
  type: `time`,
} ,
salesforce_opportunity_natural_key:  {
  sql: `salesforce_opportunity_natural_key`,
  type: `string`,
} ,
created_at:  {
  sql: `created_at`,
  type: `time`,
} ,
modified_at:  {
  sql: `modified_at`,
  type: `time`,
} ,
change:  {
  sql: `change`,
  type: `string`,
} ,
has_deferred:  {
  sql: `has_deferred`,
  type: `string`,
} ,
}});
cube (`sales_new_programs`, {
sql: `select * from analytics_qa.sales_new_programs`,
dimensions: {
program_launch_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `program_launch_pk`,
  description: ``,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
program_fk:  {
  sql: `program_fk`,
  type: `string`,
} ,
program_intake_fk:  {
  sql: `program_intake_fk`,
  type: `string`,
} ,
launch_name:  {
  sql: `launch_name`,
  type: `string`,
} ,
launch:  {
  sql: `launch`,
  type: `time`,
} ,
launch_expiry:  {
  sql: `launch_expiry`,
  type: `time`,
} ,
institution_name:  {
  sql: `institution_name`,
  type: `string`,
} ,
program_code:  {
  sql: `program_code`,
  type: `string`,
} ,
program_name:  {
  sql: `program_name`,
  type: `string`,
} ,
program_type:  {
  sql: `program_type`,
  type: `string`,
} ,
award_name:  {
  sql: `award_name`,
  type: `string`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
}});
cube (`sales_priority_programs`, {
sql: `select * from analytics_qa.sales_priority_programs`,
dimensions: {
priority_program_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `priority_program_pk`,
  description: `not available`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
program_fk:  {
  sql: `program_fk`,
  type: `string`,
} ,
program_intake_fk:  {
  sql: `program_intake_fk`,
  type: `string`,
} ,
priority_reason:  {
  sql: `priority_reason`,
  type: `string`,
} ,
institution_name:  {
  sql: `institution_name`,
  type: `string`,
} ,
program_code:  {
  sql: `program_code`,
  type: `string`,
} ,
program_name:  {
  sql: `program_name`,
  type: `string`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
}});
cube (`sales_quota_allocations`, {
sql: `select * from analytics_qa.sales_quota_allocations`,
dimensions: {
quota_allocation_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `quota_allocation_pk`,
  description: `not available`,
} ,
university_code:  {
  sql: `university_code`,
  type: `string`,
} ,
university_name:  {
  sql: `university_name`,
  type: `string`,
} ,
college_code:  {
  sql: `college_code`,
  type: `string`,
} ,
degree_concat:  {
  sql: `degree_concat`,
  type: `string`,
} ,
quota_group:  {
  sql: `quota_group`,
  type: `string`,
} ,
nationaility_criteria:  {
  sql: `nationaility_criteria`,
  type: `string`,
} ,
sponsor_criteria:  {
  sql: `sponsor_criteria`,
  type: `string`,
} ,
agent_region_criteria:  {
  sql: `agent_region_criteria`,
  type: `string`,
} ,
program_criteria:  {
  sql: `program_criteria`,
  type: `string`,
} ,
limited:  {
  sql: `limited`,
  type: `time`,
} ,
closed:  {
  sql: `closed`,
  type: `time`,
} ,
}});
cube (`sales_scholarships`, {
sql: `select * from analytics_qa.sales_scholarships`,
dimensions: {
scholarships_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `scholarships_pk`,
  description: `not available`,
} ,
study_plan_fk:  {
  sql: `study_plan_fk`,
  type: `string`,
} ,
application_fk:  {
  sql: `application_fk`,
  type: `string`,
} ,
scholarship_reason:  {
  sql: `scholarship_reason`,
  type: `string`,
} ,
scholarship_note:  {
  sql: `scholarship_note`,
  type: `string`,
} ,
student_ledger_currency_code:  {
  sql: `student_ledger_currency_code`,
  type: `string`,
} ,
budget_pot:  {
  sql: `budget_pot`,
  type: `string`,
} ,
created_at:  {
  sql: `created_at`,
  type: `time`,
} ,
application_status_group:  {
  sql: `application_status_group`,
  type: `string`,
} ,
}});
cube (`sales_student`, {
sql: `select * from analytics_qa.sales_student`,
dimensions: {
student_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `student_pk`,
  description: `The key to link to/indicate a certain student`,
} ,
country_fk:  {
  sql: `country_fk`,
  type: `string`,
} ,
nationality_fk:  {
  sql: `nationality_fk`,
  type: `string`,
} ,
student_natural_key:  {
  sql: `student_natural_key`,
  type: `string`,
} ,
kss_student_id:  {
  sql: `kss_student_id`,
  type: `string`,
} ,
class_student_id:  {
  sql: `class_student_id`,
  type: `string`,
} ,
student_salesforce_natural_key:  {
  sql: `student_salesforce_natural_key`,
  type: `string`,
} ,
name:  {
  sql: `name`,
  type: `string`,
} ,
gender:  {
  sql: `gender`,
  type: `string`,
} ,
country_iso_key:  {
  sql: `country_iso_key`,
  type: `string`,
} ,
source:  {
  sql: `source`,
  type: `string`,
} ,
nationality:  {
  sql: `nationality`,
  type: `string`,
} ,
dob:  {
  sql: `dob`,
  type: `time`,
} ,
created_at:  {
  sql: `created_at`,
  type: `time`,
} ,
modified_at:  {
  sql: `modified_at`,
  type: `time`,
} ,
}});
cube (`scholarship_budgets`, {
sql: `select * from analytics_qa.scholarship_budgets`,
dimensions: {
scholarship_budgets_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `scholarship_budgets_pk`,
  description: `The key to link to the scholarship budget records`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
schols_region:  {
  sql: `schols_region`,
  type: `string`,
} ,
budget_pot:  {
  sql: `budget_pot`,
  type: `string`,
} ,
budget_owner:  {
  sql: `budget_owner`,
  type: `string`,
} ,
}});
cube (`scholarship_targets`, {
sql: `select * from analytics_qa.scholarship_targets`,
dimensions: {
scholarship_targets_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `scholarship_targets_pk`,
  description: `not available`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
schols_region:  {
  sql: `schols_region`,
  type: `string`,
} ,
}});
cube (`targets_institutions`, {
sql: `select * from analytics_qa.targets_institutions`,
dimensions: {
institution_target_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `institution_target_pk`,
  description: `not available`,
} ,
institution_fk:  {
  sql: `institution_fk`,
  type: `string`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
institution_name:  {
  sql: `institution_name`,
  type: `string`,
} ,
}});
cube (`targets_sales_regions`, {
sql: `select * from analytics_qa.targets_sales_regions`,
dimensions: {
sales_region_target_pk:  {
  primaryKey: true,
  type: `string`,
  sql: `sales_region_target_pk`,
  description: `The key to link to the target sales region`,
} ,
sales_region_target_country_fk:  {
  sql: `sales_region_target_country_fk`,
  type: `string`,
} ,
intake_name:  {
  sql: `intake_name`,
  type: `string`,
} ,
country_name:  {
  sql: `country_name`,
  type: `string`,
} ,
sales_region:  {
  sql: `sales_region`,
  type: `string`,
} ,
sales_region_group:  {
  sql: `sales_region_group`,
  type: `string`,
} ,
sales_channel:  {
  sql: `sales_channel`,
  type: `string`,
} ,
}});
